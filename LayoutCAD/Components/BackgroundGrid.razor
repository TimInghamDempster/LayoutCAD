<!-- The View for the backing grid, starts with the background rect-->
@if (_viewModel != null)
{
    <!-- We have a coloured rect underneath the grid lines and labels-->
    <rect width="100%" height="100%" style="fill:rgb(255,255,255);stroke-width:2;stroke:rgb(0,0,0)"
        @onmousewheel="OnMouseWheel"
        @onmousemove="OnMouseMove"
        @onmousedown="OnMouseDown"
        @onmouseup="OnMouseUp" />
    <!-- Now draw the grid lines, both horizontal and vertical lines are in the same collection-->
    @if (_viewModel != null)
    {
        @foreach (var line in _viewModel.GridLines)
        {
            <!-- The line itself-->
            <line x1="@line.Start.Point.X" x2="@line.End.Point.X" y1="@line.Start.Point.Y" y2="@line.End.Point.Y" style="stroke-width:1;stroke:rgb(0,0,255)"/>
            <!-- And a label telling us which line it is, this is a little tricky
                because blazor and svg both have a text tag that means different things
                so we have to wrap it in an svg tag to disambiguate.  We could also wrap
                it in a blazor text tag but that would break the dynamic content-->
            <svg> <text x="@line.TextPos.Point.X" y="@line.TextPos.Point.Y" pointer-events="none">@line.Text</text></svg>
        }
    }
}
    @code {
    private BackgroundGridVM? _viewModel;
    [Parameter]
    public BackgroundGridVM ViewModel
    {
        set
        {
            if (_viewModel != null)
            {
                _viewModel.PropertyChanged -= VMPropertyChanged;
            }
            _viewModel = value;
            _viewModel.PropertyChanged += VMPropertyChanged;
        }
    }

    private void VMPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        this.StateHasChanged();
    }

    public void StateChanged()
    {
        this.StateHasChanged();
    }

    private void OnMouseDown(MouseEventArgs args)
    {
        long leftButton = 1;
        if (args.Buttons == leftButton)
        {
            _viewModel?.OnMouseDown(args.ScreenX, args.ScreenY);
        }
    }

    private void OnMouseUp(MouseEventArgs args)
    {
        _viewModel?.OnMouseUp();
    }

    private void OnMouseWheel(WheelEventArgs args)
    {
        _viewModel?.OnMouseWheel((float)args.DeltaY);
    }

    private void OnMouseMove(MouseEventArgs args)
    {
        _viewModel?.OnMouseMove(args.Buttons, args.ScreenX, args.ScreenY);
    }
}
